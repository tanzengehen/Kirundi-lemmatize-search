# English (United Kingdom) translations Ingenzura-ikirundi.
# Copyright (C) 2023 ORGANIZATION
# This file is distributed under the same license as the Ingenzura-ikirundi
# project.
# SEBASTIAN LISKEN <EMAIL@ADDRESS>, 2023.
#
msgid ""
msgstr ""
"Project-Id-Version: Ingenzura-ikirundi 1.0\n"
"Report-Msgid-Bugs-To: deki.kazinduzi@gmail.com\n"
"POT-Creation-Date: 2024-01-07 21:49+0100\n"
"PO-Revision-Date: 2023-09-09 21:37+0200\n"
"Last-Translator: Sebastian Lisken <EMAIL@ADDRESS>\n"
"Language: en_GB\n"
"Language-Team: en_GB <LL@li.org>\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.13.1\n"

#: lemmatize_search/kir_helper2.py:218
msgid ""
"Sorry, I didn't save the list that starts with:\n"
"    {}\n"
"I was expecting only str, int, tuple or list as list elements."
msgstr ""

#: lemmatize_search/kir_prepare_verbs.py:135
msgid "lemma has no stem in database: ID {}"
msgstr ""

#: lemmatize_search/kir_prepare_verbs.py:584
msgid "{}: perfective? -{}"
msgstr ""

#: lemmatize_search/kir_prepare_verbs.py:641
msgid ""
"\n"
"\t\ttried to add passiv to\n"
"perfective but unknown letter before y"
msgstr ""

#: lemmatize_search/kir_prepare_verbs.py:888
msgid ""
"Attention: filter proverbs out doesn't work with '{}'. Check also its "
"alternatives in the database."
msgstr ""

#: lemmatize_search/kir_prepare_verbs.py:921
msgid "filter passiv out doesn't work': {}"
msgstr ""

#: lemmatize_search/kir_start_input_console.py:39
msgid "txt or csv file or 'q' for 'quit'"
msgstr ""

#: lemmatize_search/kir_start_input_console.py:42
msgid ""
"This file doesn't exist. {}\n"
"Try again"
msgstr ""

#: lemmatize_search/kir_start_input_console.py:59
msgid "please give me a searchterm"
msgstr ""

#: lemmatize_search/kir_start_input_console.py:65
msgid ""
"'*' only for words, not for letters.\n"
"Write searchterm again please"
msgstr ""

#: lemmatize_search/kir_start_input_console.py:88
msgid "all except "
msgstr ""

#: lemmatize_search/kir_start_input_console.py:95
msgid "(exact) + "
msgstr ""

#: lemmatize_search/kir_start_input_console.py:99
msgid "anything + "
msgstr ""

#: lemmatize_search/kir_start_input_console.py:133
msgid ""
"\n"
"Select the Rundi text you want to inspect."
msgstr ""

#: lemmatize_search/kir_start_input_console.py:137
msgid "Prefer the tagged file, if there is one already: 'tag__file.csv'"
msgstr ""

#: lemmatize_search/kir_start_input_console.py:140 lemmatize_search/qt.py:164
msgid "path/to/file"
msgstr ""

#: lemmatize_search/kir_start_input_console.py:155
msgid ""
"\n"
"What are you looking for?\n"
"    Divide searchterms with space characters.\n"
"    You can put a '!' before a !word or !tag, if you want to exclude it.\n"
"    You can place a separate '*' to set one token as wildcard.\n"
"    You can place a '/' before a /word, if you want to find exact this "
"word,\n"
"    else the word will be taken as a lemma and all wordforms will be "
"found.\n"
"\n"
"    You can use these tags:\n"
"        [ADJ, ADV, CONJ, EMAIL, F(foreign word), INTJ, NI, NOUN,\n"
"        NUM, NUM_ROM (roman number), PRON (pronouns), PROPN,\n"
"        PROPN_CUR, PROPN_LOC (geographical place),\n"
"        PROPN_NAM (personal name), PROPN_ORG,\n"
"        PROPN_PER (group of persons), PROPN_REL, PROPN_SCI,\n"
"        PROPN_THG, PROPN_VEG, PRP (prepositions), SYMBOL,\n"
"        UNK (unkwon to dictionary), VERB, WWW (webaddress)]\n"
"Now enter our search term"
msgstr ""

#: lemmatize_search/kir_start_input_console.py:185
msgid "\tOK, you are looking for a {}-gram.\n"
msgstr ""

#: lemmatize_search/kir_tag_search.py:45
msgid "sorting Named Entities ..........................."
msgstr ""

#: lemmatize_search/kir_tag_search.py:51
msgid ""
"\n"
"Named Entities      : "
msgstr ""

#: lemmatize_search/kir_tag_search.py:58
msgid "adverbs etc         : "
msgstr ""

#: lemmatize_search/kir_tag_search.py:66
msgid "pronouns            : "
msgstr ""

#: lemmatize_search/kir_tag_search.py:72
msgid "sorting nouns ...................................."
msgstr ""

#: lemmatize_search/kir_tag_search.py:77
msgid ""
"\n"
"nouns               : "
msgstr ""

#: lemmatize_search/kir_tag_search.py:85
msgid "adjektives          : "
msgstr ""

#: lemmatize_search/kir_tag_search.py:90
msgid "sorting verbs ...................................."
msgstr ""

#: lemmatize_search/kir_tag_search.py:95
msgid ""
"\n"
"verbs               : "
msgstr ""

#: lemmatize_search/kir_tag_search.py:105
msgid ""
"\n"
"exclamations        : "
msgstr ""

#: lemmatize_search/kir_tag_search.py:122
msgid ""
"\n"
"Vocabulary\n"
"characters         : {nchar:12}\n"
"tokens             : {ntokens:12}\n"
"types              : {ntypes:12} "
msgstr ""

#: lemmatize_search/kir_tag_search.py:281
msgid ""
"\n"
"tagging text, this may take some moments ........."
msgstr ""

#: lemmatize_search/kir_tag_search.py:333
#, python-format
msgid ""
"\n"
"unknown types      : {:12} ({}% incl. broken words, mistakes, ...)"
msgstr ""

#: lemmatize_search/kir_tag_search.py:337
msgid "recognized lemmata : {:12}"
msgstr ""

#: lemmatize_search/kir_tag_search.py:526
msgid "Error: missing tag"
msgstr ""

#: lemmatize_search/kir_tag_search.py:569
#: lemmatize_search/kir_tag_search.py:631
msgid ""
"\n"
"\n"
"All tagged files saved in: \n"
msgstr ""

#: lemmatize_search/kir_tag_search.py:572
#: lemmatize_search/kir_tag_search.py:633
msgid ""
"\n"
"We can use them again later."
msgstr ""

#: lemmatize_search/kir_tag_search.py:579
msgid "Wir w√ºhlen uns durch die Dateien..."
msgstr ""

#: lemmatize_search/kir_tag_search.py:641
msgid ""
"\n"
"Statistics\n"
"characters               :{char:12}  ({odds} unreadable chars from bad "
"OCR)\n"
"tokens                   :{tokensbond:12}\n"
"tokens (when split by ') :{tokens_split:12}\n"
"types                    :{types:12}\n"
"recognized lemmata       :{lemmata:12}\n"
"unknown types            :{unk:15} %\n"
"used dictionary          :   {db_name}\n"
"short filename           :   {short_fn}"
msgstr ""

#: lemmatize_search/kir_tag_search.py:666
msgid "Preparing file ..."
msgstr ""

#: lemmatize_search/kir_tag_search.py:680
msgid ""
"Your file is older than our version of the Rundi dictionary.\n"
"Do you want to use your file or tag again the underlying text?\n"
"(maybe now there are less unknown words in your text)"
msgstr ""

#: lemmatize_search/kir_tag_search.py:700
msgid "There is already a tagged file: (made {good_old})"
msgstr ""

#: lemmatize_search/kir_tag_search.py:702
msgid ""
"\n"
"We use this instead of tagging again.\n"
msgstr ""

#: lemmatize_search/kir_tag_search.py:717
msgid "Sorry, can't use the file: {}"
msgstr ""

#: lemmatize_search/kir_tag_search.py:755
msgid ""
"\n"
"\n"
"Tagged file saved as: \n"
msgstr ""

#: lemmatize_search/kir_tag_search.py:757
msgid ""
"\n"
"We can use it again later."
msgstr ""

#: lemmatize_search/kir_tag_search.py:769
msgid ""
"Lemma-version of the text saved as:\n"
"\t"
msgstr ""

#: lemmatize_search/kir_tag_search.py:807
msgid "You searched this already"
msgstr ""

#: lemmatize_search/kir_tag_search.py:838
msgid ""
"All results are saved in file:\n"
"\t"
msgstr ""

#: lemmatize_search/kir_tag_search.py:846
msgid ""
"\n"
"No results for this query."
msgstr ""

#: lemmatize_search/kir_tag_search.py:861
msgid "Sorry, missing meta-data in csv-file"
msgstr ""

#: lemmatize_search/kir_tag_search.py:870
msgid "Sorry, wrong meta-data keys in your csv"
msgstr ""

#: lemmatize_search/kir_tag_search.py:884
msgid "Sorry, I can't read your csv-file as a tagged text."
msgstr ""

#: lemmatize_search/qt.py:45
msgid "Setti&ngs"
msgstr ""

#: lemmatize_search/qt.py:52
msgid "&Info"
msgstr ""

#: lemmatize_search/qt.py:60
msgid "&tag"
msgstr ""

#: lemmatize_search/qt.py:61
msgid "&search"
msgstr ""

#: lemmatize_search/qt.py:62
msgid "&download"
msgstr ""

#: lemmatize_search/qt.py:68
msgid "&Help Content"
msgstr ""

#: lemmatize_search/qt.py:69 lemmatize_search/qt.py:85
#: lemmatize_search/qt.py:101 lemmatize_search/qt.py:113
msgid "&About"
msgstr ""

#: lemmatize_search/qt.py:122
msgid "  How to"
msgstr ""

#: lemmatize_search/qt.py:126
msgid "  About this App"
msgstr ""

#: lemmatize_search/qt.py:161
msgid "Select the Rundi text you want to inspect:"
msgstr ""

#: lemmatize_search/qt.py:166
msgid "Select file"
msgstr ""

#: lemmatize_search/qt.py:187
msgid "only txt or csv"
msgstr ""

#: lemmatize_search/qt.py:196
msgid "Your search query:"
msgstr ""

#: tests/test_helper.py:29 tests/test_helper.py:36 tests/test_helper.py:50
msgid "Are you sure, that this is a tagged file?"
msgstr ""

#~ msgid "Kubera ko ataco watoye nahejeje."
#~ msgstr ""

#~ msgid ""
#~ "(kh.save_list) Sorry, I didn't save the"
#~ " list that int, tuple or list "
#~ "as list elements"
#~ msgstr ""

#~ msgid "You are looking for a %s-gram)"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "    Now specify each part\n"
#~ "\n"
#~ "(You can put a '!' before it, if you want to exclude this word or tag)"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "    What are you looking for?\n"
#~ "            - for Bigrams or Trigrams"
#~ " use a combination of two "
#~ "respectively\n"
#~ "three letters etc.\n"
#~ "            - Possible PoS-tags:\n"
#~ "               ADJ, ADV, CONJ, EMAIL, "
#~ "F(foreign words), INTJ, NI, NOUN,\n"
#~ "               NUM, NUM_ROM (roman numbers), PRON (pronouns),\n"
#~ "               PROPN, PROPN_CUR, PROPN_LOC (geographical places),\n"
#~ "               PROPN_NAM (personal names), "
#~ "PROPN_ORG , PROPN_PER, PROPN_REL,\n"
#~ "               PROPN_SCI, PROPN_THG, PROPN_VEG, PRP (prepositions),\n"
#~ "               SYMBOL, UNK (unkwon to "
#~ "dictionary), VERB, WWW (webaddresses)\n"
#~ "\n"
#~ "Chose letters from"
#~ msgstr ""

#~ msgid ""
#~ "(kh.save_list) Sorry, I didn't save the list\n"
#~ " that starts with: %s\n"
#~ "I was expecting str, int, tuple or list as list\n"
#~ " elements"
#~ msgstr ""

#~ msgid "You are looking for a %s-gram."
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "    Now specify each part\n"
#~ "\n"
#~ "You can put a '!' before it, if you want to exclude this word or tag."
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "    What are you looking for?\n"
#~ "            - for Bigrams or Trigrams"
#~ " use a combination of two "
#~ "respectively three letters etc.\n"
#~ "            - Possible PoS-tags:\n"
#~ "               ADJ, ADV, CONJ, EMAIL, "
#~ "F(foreign words), INTJ, NI, NOUN,\n"
#~ "               NUM, NUM_ROM (roman numbers), PRON (pronouns),\n"
#~ "               PROPN, PROPN_CUR, PROPN_LOC (geographical places),\n"
#~ "               PROPN_NAM (personal names), "
#~ "PROPN_ORG , PROPN_PER, PROPN_REL,\n"
#~ "               PROPN_SCI, PROPN_THG, PROPN_VEG, PRP (prepositions),\n"
#~ "               SYMBOL, UNK (unkwon to "
#~ "dictionary), VERB, WWW (webaddresses)\n"
#~ "\n"
#~ "Chose letters from"
#~ msgstr ""

#~ msgid ""
#~ "(kh.save_list) Sorry, I didn't save the list that starts with: %s\n"
#~ "I was expecting str, int, tuple or list as list\n"
#~ " elements"
#~ msgstr ""

#~ msgid ""
#~ "An error occurred while reading file: '%s'\n"
#~ "\n"
#~ "Please choose a txt or json file."
#~ msgstr ""

#~ msgid "You are looking for a %s-gram"
#~ msgstr ""

#~ msgid "Ijambo ririhe? (Which word?) : "
#~ msgstr ""

#~ msgid "Amajambo yose afise indanzi (all words with tag) : "
#~ msgstr ""

#~ msgid "Amajambo yose y'itsitso ririhe? (all words of lemma) : "
#~ msgstr ""

#~ msgid "All tokens with this tag) : "
#~ msgstr ""

#~ msgid "All words of lemma) : "
#~ msgstr ""

#~ msgid ""
#~ "An error occurred while reading file: '%s'\n"
#~ "Please choose a txt or json file."
#~ msgstr ""

#~ msgid ""
#~ "An error has occurred:\n"
#~ "Invalid query: only 'w', '!w', 't', '!t', 'l', '!l' or '?'"
#~ msgstr ""

#~ msgid ""
#~ "Select the Rundi text you want to inspect\n"
#~ "\tc\t\t\t= whole tagged corpus\n"
#~ "\tpath/to/file\t\t= a single file (txt or json)\n"
#~ "prefer the tagged file, if there is one already\n"
#~ ": "
#~ msgstr ""

#~ msgid "\tpath/to/file\t\t"
#~ msgstr ""

#~ msgid "path/to/file"
#~ msgstr ""

#~ msgid ""
#~ "\t- for Bigrams or Trigrams use"
#~ " a combination of two respectively "
#~ "three letters etc."
#~ msgstr ""

#~ msgid "\t- Possible PoS-tags:"
#~ msgstr ""

#~ msgid " What are you looking for?"
#~ msgstr ""

#~ msgid ""
#~ " - for Bigrams or Trigrams use "
#~ "a combination of two respectively three"
#~ " letters etc."
#~ msgstr ""

#~ msgid " - Possible PoS-tags:"
#~ msgstr ""

#~ msgid ""
#~ "(kh.save_list) Sorry, I didn't save the list\n"
#~ " that starts with: %s\n"
#~ "I was expecting str, int, tuple or list as list elements"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "    Now specify each part"
#~ msgstr ""

#~ msgid "You can put a '!' before it, if you want to exclude this word or tag."
#~ msgstr ""

#~ msgid "%s: wildcard"
#~ msgstr ""

#~ msgid ""
#~ "- for Bigrams or Trigrams use a"
#~ " combination of two respectively three "
#~ "letters etc."
#~ msgstr ""

#~ msgid "- Possible PoS-tags:"
#~ msgstr ""

#~ msgid "Chose letters from"
#~ msgstr ""

#~ msgid "\tNow specify each part"
#~ msgstr ""

#~ msgid ""
#~ "\tYou can put a '!' before "
#~ "it, if you want to exclude this"
#~ " word or tag.\n"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "Search for: %s"
#~ msgstr ""

#~ msgid " Select the Rundi text you want to inspect:"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "Chose letters from"
#~ msgstr ""

#~ msgid "%s%s- wildcard"
#~ msgstr ""

#~ msgid "You are looking for a %(anzahl)i-gram.anzahl"
#~ msgstr ""

#~ msgid "Invalid tag: %s"
#~ msgstr ""

#~ msgid "Search for: %s"
#~ msgstr ""

#~ msgid "You are looking for a %(anzahl)s-gram.anzahl"
#~ msgstr ""

#~ msgid "Invalid tag: %(wrong)swrong"
#~ msgstr ""

#~ msgid "Search for: %(anfrage)sanfrage"
#~ msgstr ""

#~ msgid "You are looking for a %i-gram."
#~ msgstr ""

#~ msgid "Search for: %(anfrage)s"
#~ msgstr ""

#~ msgid "Prefer the tagged file, if there is one already."
#~ msgstr ""

#~ msgid "What are you looking for?"
#~ msgstr ""

#~ msgid "= whole tagged corpus"
#~ msgstr ""

#~ msgid "path/to/file\t"
#~ msgstr ""

#~ msgid ""
#~ "ADJ, ADV, CONJ, EMAIL, F(foreign words),"
#~ " INTJ, NI, NOUN, NUM, NUM_ROM (roman"
#~ " numbers), PRON (pronouns), PROPN, "
#~ "PROPN_CUR, PROPN_LOC (geographical places), "
#~ "PROPN_NAM (personal names), PROPN_ORG , "
#~ "PROPN_PER, PROPN_REL, PROPN_SCI, PROPN_THG, "
#~ "PROPN_VEG, PRP (prepositions), SYMBOL, UNK "
#~ "(unkwon to dictionary), VERB, WWW "
#~ "(webaddresses)"
#~ msgstr ""

#~ msgid "only 'w', '!w', 't', '!t', 'l', '!l' or '?'"
#~ msgstr ""

#~ msgid "%s- wildcard"
#~ msgstr ""

#~ msgid "An error occurred while reading file: '%s'"
#~ msgstr ""

#~ msgid "You didn't select anything. I quit."
#~ msgstr ""

#~ msgid "An error occurred while reading file: '{}'"
#~ msgstr ""

#~ msgid "Please choose a txt or json file."
#~ msgstr ""

#~ msgid "Specify your search"
#~ msgstr ""

#~ msgid "An error has occurred:"
#~ msgstr ""

#~ msgid "Invalid query: "
#~ msgstr ""

#~ msgid "Which word? : "
#~ msgstr ""

#~ msgid "All tokens with this tag : "
#~ msgstr ""

#~ msgid "All words of lemma : "
#~ msgstr ""

#~ msgid "You are looking for a {}-gram."
#~ msgstr ""

#~ msgid "Now specify each part"
#~ msgstr ""

#~ msgid "You can put a '!' before it, if you want to exclude this word or tag.\n"
#~ msgstr ""

#~ msgid "    part "
#~ msgstr ""

#~ msgid "{}- wildcard"
#~ msgstr ""

#~ msgid "Invalid tag: {}. I quit"
#~ msgstr ""

#~ msgid "You didn't select anything, I quit."
#~ msgstr ""

#~ msgid "\tpath/to/file\t"
#~ msgstr ""

#~ msgid "= a single file (txt or json)"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "What are you looking for?"
#~ msgstr ""

#~ msgid ""
#~ "[ADJ, ADV, CONJ, EMAIL, F(foreign "
#~ "words), INTJ, NI, NOUN, NUM, NUM_ROM "
#~ "(roman numbers), PRON (pronouns), PROPN, "
#~ "PROPN_CUR, PROPN_LOC (geographical places), "
#~ "PROPN_NAM (personal names), PROPN_ORG , "
#~ "PROPN_PER, PROPN_REL, PROPN_SCI, PROPN_THG, "
#~ "PROPN_VEG, PRP (prepositions), SYMBOL, UNK "
#~ "(unkwon to dictionary), VERB, WWW "
#~ "(webaddresses)]"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "        W = exact word\n"
#~ "        L = all wordforms of a lemma\n"
#~ "        T = part of speech-tag\n"
#~ "        ? = wildcard\n"
#~ ": "
#~ msgstr ""

#~ msgid "lemma has no stem in database: ID%i"
#~ msgstr ""

#~ msgid "add passiv to perfective: unk vor y {lemma} {perfective}"
#~ msgstr ""

#~ msgid ""
#~ " Sorry, I didn't save the list\n"
#~ " that starts with: {}\n"
#~ "I was expecting str, int, tuple or list as list\n"
#~ " elements"
#~ msgstr ""

#~ msgid "Invalid tag: {}."
#~ msgstr ""

#~ msgid "There will be no result."
#~ msgstr ""

#~ msgid "Search for: {}"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "What are you looking for?\n"
#~ "    Divide searchterms with space characters.\n"
#~ "    You can put a '!' before "
#~ "a word or tag, if you want "
#~ "to exclude it.\n"
#~ "    You can place a '*' for a wildcard.\n"
#~ "\n"
#~ "    Possible PoS-tags:\n"
#~ "        [ADJ, ADV, CONJ, EMAIL, F(foreign word), INTJ, NI, NOUN,\n"
#~ "        NUM, NUM_ROM (roman number), PRON (pronouns), PROPN,\n"
#~ "        PROPN_CUR, PROPN_LOC (geographical place),\n"
#~ "        PROPN_NAM (personal name), PROPN_ORG,\n"
#~ "        PROPN_PER (group of persons), PROPN_REL, PROPN_SCI,\n"
#~ "        PROPN_THG, PROPN_VEG, PRP (prepositions), SYMBOL,\n"
#~ "        UNK (unkwon to dictionary), VERB, WWW (webaddress)]\n"
#~ "your searchterm"
#~ msgstr ""

#~ msgid ""
#~ "For distinction between type, tag and lemma\n"
#~ "chose for each part of the searchterm a letter"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "vocabulary: {} tokens"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "pronouns            :"
#~ msgstr ""

#~ msgid "nouns               :"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "adjektives          :"
#~ msgstr ""

#~ msgid "verbs               :"
#~ msgstr ""

#~ msgid "lemmata of text: {}"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "niryo ndakoresha ku kibanza ca gusubira gukora indanzi"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "Rindira akanya, ndiko ndategura amajambo ya kazinduzi ..."
#~ msgstr ""

#~ msgid "ndiko ndategura ifishi ...\n"
#~ msgstr ""

#~ msgid ""
#~ "Sorry, I didn't save the list\n"
#~ "that starts with: {}\n"
#~ "I was expecting str, int, tuple or list\n"
#~ "as list elements."
#~ msgstr ""

#~ msgid ""
#~ "tried to add passiv to perfective:\n"
#~ " unk before y {lemma} {perfective}"
#~ msgstr ""

#~ msgid "vocabulary: {} tokens"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "Named Entities      :"
#~ msgstr ""

#~ msgid "adverbs etc         :"
#~ msgstr ""

#~ msgid "Hari ifishi n'indanzi: (rikorwa {})"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "niryo ndakoresha ku kibanza ca gusubira gukora indanzi.\n"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "\n"
#~ "Nashinguye iki gisomwa n'indanzi mu fishi: \n"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "Turashobora gusubira kurikoresha ikindi gihe."
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "Inyishu 1-20 (hari {}). Uraronka zose mu fishi:"
#~ msgstr ""

#~ msgid "Nta nyishu."
#~ msgstr ""

#~ msgid "{}: perfective? {}"
#~ msgstr ""

#~ msgid ""
#~ "tried to add passiv to perfective:\n"
#~ "    unk before y\n"
#~ "\t{lemma} -{perfective}"
#~ msgstr ""

#~ msgid "Nothing found."
#~ msgstr ""

#~ msgid "sorry, unknown format"
#~ msgstr ""

#~ msgid "Query = {}"
#~ msgstr ""

#~ msgid ""
#~ "\t{lemma} -{perfective}:\n"
#~ "\t\ttried to add passiv to perfective but unknown letter before y"
#~ msgstr ""

#~ msgid "\tvocabulary: {} tokens"
#~ msgstr ""

#~ msgid "types\n"
#~ msgstr ""

#~ msgid "sorting Named Entities {}"
#~ msgstr ""

#~ msgid "27"
#~ msgstr ""

#~ msgid "sorting nouns {}"
#~ msgstr ""

#~ msgid "36"
#~ msgstr ""

#~ msgid "sorting verbs {}"
#~ msgstr ""

#~ msgid "37"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "Hit 1-20 (out of {}). All saved as:"
#~ msgstr ""

#~ msgid ""
#~ "\tvocabulary: {ntokens} tokens\n"
#~ "{free}{ntypes} types\n"
#~ msgstr ""

#~ msgid "16"
#~ msgstr ""

#~ msgid "Select the Rundi text you want to inspect:"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "What are you looking for?\n"
#~ "    Divide searchterms with space characters.\n"
#~ "    You can put a '!' before "
#~ "a !word or tag, if you want "
#~ "to exclude it.\n"
#~ "    You can place a '*' for a wildcard.\n"
#~ "\n"
#~ "    Possible PoS-tags:\n"
#~ "        [ADJ, ADV, CONJ, EMAIL, F(foreign word), INTJ, NI, NOUN,\n"
#~ "        NUM, NUM_ROM (roman number), PRON (pronouns), PROPN,\n"
#~ "        PROPN_CUR, PROPN_LOC (geographical place),\n"
#~ "        PROPN_NAM (personal name), PROPN_ORG,\n"
#~ "        PROPN_PER (group of persons), PROPN_REL, PROPN_SCI,\n"
#~ "        PROPN_THG, PROPN_VEG, PRP (prepositions), SYMBOL,\n"
#~ "        UNK (unkwon to dictionary), VERB, WWW (webaddress)]\n"
#~ "Your searchterm"
#~ msgstr ""

#~ msgid ""
#~ "\t\tW = exact word\n"
#~ "\t\tL = all wordforms of a Lemma\n"
#~ "\t\tT = Part of Speech-tag\n"
#~ "\t\t? = wildcard"
#~ msgstr ""

#~ msgid ""
#~ "This file doesn't exist: '{}'.\n"
#~ "Try again."
#~ msgstr ""

#~ msgid ""
#~ "This file doesn't exist.\n"
#~ "Try again."
#~ msgstr ""

#~ msgid ""
#~ "\tvocabulary: {ntokens} tokens\n"
#~ "................{ntypes} types\n"
#~ msgstr ""

#~ msgid ""
#~ "Sorry, I didn't save the list that starts with: \n"
#~ "{}\n"
#~ "I was expecting str, int, tuple or list\n"
#~ "as list elements."
#~ msgstr ""

#~ msgid ""
#~ "This file doesn't exist.\n"
#~ "Try again"
#~ msgstr ""

#~ msgid "{} entries of the dictionary prepared."
#~ msgstr ""

#~ msgid ""
#~ "\tvocabulary: {ntokens} tokens\n"
#~ "                {ntypes} types\n"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "Preparing dictionary, just a moment ..."
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "pronouns            : "
#~ msgstr ""

#~ msgid "nouns               : "
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "adjektives          : "
#~ msgstr ""

#~ msgid "verbs               : "
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "lemmata of text: {}"
#~ msgstr ""

#~ msgid "unknown types  : {}"
#~ msgstr ""

#~ msgid "OK, cool environment down, less work, it's a tagged text!"
#~ msgstr ""

#~ msgid "Sorry, unknown format."
#~ msgstr ""

#~ msgid "txt or json file or 'q' for 'quit'"
#~ msgstr ""

#~ msgid ""
#~ "please enter the 'wtl' combination for your\n"
#~ "searchterms or 'q' for 'quit'"
#~ msgstr ""

#~ msgid "\tonly 'w', '!w', 't', '!t', 'l', '!l' or '?'"
#~ msgstr ""

#~ msgid "Hm, not as many as searchterms... Please again."
#~ msgstr ""

#~ msgid "all + "
#~ msgstr ""

#~ msgid "mismatch: wildcard {}."
#~ msgstr ""

#~ msgid "I go with the wildcard. Y/N : "
#~ msgstr ""

#~ msgid "yY"
#~ msgstr ""

#~ msgid "Start again"
#~ msgstr ""

#~ msgid "all except "
#~ msgstr ""

#~ msgid "Invalid tag: {}. There will be no result."
#~ msgstr ""

#~ msgid "Query = {}\n"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "Select the Rundi text you want to inspect:"
#~ msgstr ""

#~ msgid "\tc\t\t\t\t= whole tagged corpus"
#~ msgstr ""

#~ msgid "\tpath/to/file\t\t= a single file (txt or json)"
#~ msgstr ""

#~ msgid "Prefer the tagged file, if there is one already.\n"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "What are you looking for?\n"
#~ "    Divide searchterms with space characters.\n"
#~ "    You can put a '!' before "
#~ "a !word or !tag, if you want "
#~ "to exclude it.\n"
#~ "    You can place a separate '*' for a wildcard.\n"
#~ "\n"
#~ "    Possible PoS-tags:\n"
#~ "        [ADJ, ADV, CONJ, EMAIL, F(foreign word), INTJ, NI, NOUN,\n"
#~ "        NUM, NUM_ROM (roman number), PRON (pronouns), PROPN,\n"
#~ "        PROPN_CUR, PROPN_LOC (geographical place),\n"
#~ "        PROPN_NAM (personal name), PROPN_ORG,\n"
#~ "        PROPN_PER (group of persons), PROPN_REL, PROPN_SCI,\n"
#~ "        PROPN_THG, PROPN_VEG, PRP (prepositions), SYMBOL,\n"
#~ "        UNK (unkwon to dictionary), VERB, WWW (webaddress)]\n"
#~ "Your searchterm"
#~ msgstr ""

#~ msgid ""
#~ "For distinction between type, tag and lemma\n"
#~ "chose for each part of the searchterm a letter..."
#~ msgstr ""

#~ msgid ""
#~ "\t\tW = this type\n"
#~ "\t\tL = all types of this lemma\n"
#~ "\t\tT = Part of Speech-tag\n"
#~ "\t\t? = wildcard"
#~ msgstr ""

#~ msgid ""
#~ "Sorry, I didn't save the list that starts with:\n"
#~ "{}\n"
#~ "I was expecting str, int, tuple or list\n"
#~ "as list elements."
#~ msgstr ""

#~ msgid "lemma has no stem in database: ID{}"
#~ msgstr ""

#~ msgid "perfective is lost: {}"
#~ msgstr ""

#~ msgid "filter proverbs out doesn't work': {}"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "Vocabulary\n"
#~ "characters         : {nchar}\n"
#~ "tokens             : {ntokens}\n"
#~ "types              : {ntypes} "
#~ msgstr ""

#~ msgid "unknown types      : {} ({}%)"
#~ msgstr ""

#~ msgid "recognized lemmata : {}"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "Statistics\n"
#~ "characters               {char}\t(broken char from bad OCR: {odds})\n"
#~ "tokens                   {tokensbond}\n"
#~ "tokens (split by ')      {tokens_split}\n"
#~ "types                    {types}\n"
#~ "recognized lemmata       {lemmata}\n"
#~ "unknown types            {unk}"
#~ msgstr ""

#~ msgid "path/to/file (txt or csv)"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "Statistics\n"
#~ "characters               :{char:12}  ({odds} "
#~ "unreadable chars from bad OCR)\n"
#~ "tokens                   :{tokensbond:12}\n"
#~ "tokens (when split by ') :{tokens_split:12}\n"
#~ "types                    :{types:12}\n"
#~ "recognized lemmata       :{lemmata:12}\n"
#~ "unknown types            :{unk:15} %\n"
#~ "used dictionary          :   {db_name}"
#~ msgstr ""

#~ msgid ""
#~ "\n"
#~ "Hit 1-20 (out of {}). All results are saved in file:"
#~ msgstr ""

#~ msgid "unknown types      : {:12} ({}% incl. broken words, mistakes, ...)"
#~ msgstr ""

#~ msgid "There is already a tagged file: (made {})"
#~ msgstr ""

#~ msgid "Tora ifishi ushaka kwihweza:"
#~ msgstr ""

#~ msgid "pathname"
#~ msgstr ""

#~ msgid "Gutora ifishi"
#~ msgstr ""

#~ msgid "nur txt oder csv"
#~ msgstr ""

#~ msgid "Ikibazo c'ukurondeza:"
#~ msgstr ""

#~ msgid "&Settings"
#~ msgstr ""

#~ msgid "&Help"
#~ msgstr ""

#~ msgid "S&ettings"
#~ msgstr ""

